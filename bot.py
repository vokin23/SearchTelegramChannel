import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from telethon.sync import TelegramClient
from telethon.tl.functions.contacts import SearchRequest

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ü–∏–∫–ª–æ–≤ —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É Telethon –∏ python-telegram-bot
import nest_asyncio
nest_asyncio.apply()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)
logging.getLogger("urllib3").setLevel(logging.WARNING)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SEARCH_TERMS = 0
PHONE_NUMBER = 1
VERIFICATION_CODE = 2

# –ü–æ–ª—É—á–µ–Ω–∏–µ API –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = int(os.getenv('API_ID', '0'))
API_HASH = os.getenv('API_HASH', '')
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
MAX_RESULTS = int(os.getenv('MAX_RESULTS', '100'))
ADMIN_PHONE = os.getenv('PHONE_NUMBER', '')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
AUTH_DATA = {}
CLIENT = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telethon (—Å–∏–Ω–≥–ª—Ç–æ–Ω)
async def get_telethon_client(phone_number):
    global CLIENT
    if CLIENT is None or not CLIENT.is_connected():
        CLIENT = TelegramClient('session_' + phone_number, API_ID, API_HASH)
        await CLIENT.connect()
    return CLIENT

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Telethon
async def authenticate_telethon(phone_number):
    client = await get_telethon_client(phone_number)
    if not await client.is_user_authorized():
        result = await client.send_code_request(phone_number)
        AUTH_DATA[phone_number] = {'phone_code_hash': result.phone_code_hash}
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}")
        return client, False
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {phone_number} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    return client, True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∫–æ–¥–æ–º
async def complete_authentication(phone_number, code):
    client = await get_telethon_client(phone_number)
    try:
        if phone_number in AUTH_DATA and 'phone_code_hash' in AUTH_DATA[phone_number]:
            phone_code_hash = AUTH_DATA[phone_number]['phone_code_hash']
            await client.sign_in(phone_number, code, phone_code_hash=phone_code_hash)
            AUTH_DATA.pop(phone_number, None)
            return True
        else:
            if await client.is_user_authorized():
                return True
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ Telethon API
async def search_channels(search_terms, phone_number):
    results = []
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {search_terms}")

    client = await get_telethon_client(phone_number)

    if not await client.is_user_authorized():
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        return "auth_required"

    try:
        # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ Telegram
        for term in search_terms:
            logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {term}")
            try:
                search_result = await client(SearchRequest(
                    q=term,
                    limit=50
                ))

                for chat in search_result.chats:
                    if hasattr(chat, 'username') and chat.username and hasattr(chat, 'broadcast') and chat.broadcast:
                        channel_info = {
                            'title': chat.title,
                            'username': chat.username,
                            'link': f'https://t.me/{chat.username}',
                            'description': getattr(chat, 'about', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                            'participants_count': getattr(chat, 'participants_count', 0)
                        }

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                        if not any(r['username'] == channel_info['username'] for r in results):
                            results.append(channel_info)

                        if len(results) >= MAX_RESULTS:
                            break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Ç–µ—Ä–º–∏–Ω—É {term}: {e}")
                continue

            if len(results) >= MAX_RESULTS:
                break

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if len(results) < MAX_RESULTS:
            async for dialog in client.iter_dialogs():
                entity = dialog.entity
                if hasattr(entity, 'broadcast') and entity.broadcast and hasattr(entity, 'username') and entity.username:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                    relevant = False
                    for term in search_terms:
                        if (term.lower() in entity.title.lower() or
                            (hasattr(entity, 'about') and entity.about and term.lower() in entity.about.lower())):
                            relevant = True
                            break

                    if relevant:
                        channel_info = {
                            'title': entity.title,
                            'username': entity.username,
                            'link': f'https://t.me/{entity.username}',
                            'description': getattr(entity, 'about', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'),
                            'participants_count': getattr(entity, 'participants_count', 0)
                        }

                        if not any(r['username'] == channel_info['username'] for r in results):
                            results.append(channel_info)

                        if len(results) >= MAX_RESULTS:
                            break

        logger.info(f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(results)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return "error"

    return results

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    welcome_message = (
        "üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫ Telegram –∫–∞–Ω–∞–ª–æ–≤!* üéâ\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "üîç *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n"
        "‚Ä¢ –Ø –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º\n\n"
        "üìù *–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:*\n"
        "`–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–æ–≤–æ—Å—Ç–∏`\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ —Ç–µ—Ä–º–∏–Ω—ã, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!\n\n"
        "üöÄ –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!"
    )

    await update.message.reply_html(welcome_message)
    return SEARCH_TERMS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
async def get_search_terms(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text
    search_terms = [term.strip() for term in text.split(',') if term.strip()]

    if not search_terms:
        error_message = (
            "‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å*\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ\n\n"
            "üí° *–ü—Ä–∏–º–µ—Ä:* `–Ω–æ–≤–æ—Å—Ç–∏, —Å–ø–æ—Ä—Ç, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏`\n"
            "üîÑ –†–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–ø—è—Ç—ã–º–∏"
        )
        await update.message.reply_html(error_message)
        return SEARCH_TERMS

    context.user_data['search_terms'] = search_terms

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    search_message = (
        "üîç *–ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤...*\n\n"
        f"üéØ *–ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:* `{', '.join(search_terms)}`\n\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n"
        "üîÑ –°–∫–∞–Ω–∏—Ä—É—é –±–∞–∑—É Telegram –∫–∞–Ω–∞–ª–æ–≤..."
    )
    search_msg = await update.message.reply_html(search_message)

    phone_number = ADMIN_PHONE
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

    results = await search_channels(search_terms, phone_number)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=search_msg.message_id)
    except:
        pass

    if results == "auth_required":
        auth_message = (
            "üîê *–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è*\n\n"
            "üì± –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç\n"
            "üí¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ SMS"
        )
        await update.message.reply_html(auth_message)
        context.user_data['phone_number'] = phone_number
        client, auth_status = await authenticate_telethon(phone_number)
        return VERIFICATION_CODE
    elif results == "error":
        error_message = (
            "‚ö†Ô∏è *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ*\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ\n"
            "üí° –ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
        )
        await update.message.reply_html(error_message)
        return SEARCH_TERMS

    if not results:
        no_results_message = (
            "üòî *–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n"
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É `{', '.join(search_terms)}` –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            "üí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã\n\n"
            "üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"
        )
        await update.message.reply_html(no_results_message)
    else:
        context.user_data['search_results'] = results
        await show_channels_buttons(update, context)

    return SEARCH_TERMS

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def show_channels_buttons(update, context):
    results = context.user_data.get('search_results', [])

    if not results:
        error_message = "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        if hasattr(update, 'message') and update.message:
            await update.message.reply_html(error_message)
        else:
            await update.callback_query.edit_message_text(error_message, parse_mode='HTML')
        return

    if 'buttons_page' not in context.user_data:
        context.user_data['buttons_page'] = 0

    page = context.user_data['buttons_page']
    channels_per_page = 6
    total_pages = (len(results) + channels_per_page - 1) // channels_per_page

    start_idx = page * channels_per_page
    end_idx = min(start_idx + channels_per_page, len(results))
    current_channels = results[start_idx:end_idx]

    # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    message_text = (
        f"üéâ *–ù–∞–π–¥–µ–Ω–æ {len(results)} –∫–∞–Ω–∞–ª–æ–≤!*\n\n"
        f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n"
        f"üîΩ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:"
    )

    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    for i, channel in enumerate(current_channels, 1):
        title = channel['title']
        if len(title) > 35:
            title = title[:35] + "..."

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        subscribers_info = ""
        if channel.get('participants_count', 0) > 0:
            count = channel['participants_count']
            if count >= 1000000:
                subscribers_info = f" ({count//1000000}M)"
            elif count >= 1000:
                subscribers_info = f" ({count//1000}K)"
            else:
                subscribers_info = f" ({count})"

        button_text = f"{start_idx + i}. üì¢ {title}{subscribers_info}"
        keyboard.append([InlineKeyboardButton(button_text, url=channel['link'])])

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    keyboard.append([InlineKeyboardButton("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ", callback_data="ignore")])

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev_page"))

    nav_buttons.append(InlineKeyboardButton(f"üìÑ {page + 1}/{total_pages}", callback_data="ignore"))

    if end_idx < len(results):
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data="next_page"))

    keyboard.append(nav_buttons)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.append([
        InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"),
        InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="detailed_view")
    ])

    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        if hasattr(update, 'message') and update.message:
            # –≠—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –ø–æ–∏—Å–∫–∞
            message = await update.message.reply_html(message_text, reply_markup=reply_markup)
            context.user_data['results_message_id'] = message.message_id
            context.user_data['chat_id'] = update.message.chat_id
        elif hasattr(update, 'callback_query'):
            # –≠—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.callback_query.edit_message_text(
                text=message_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            # –ü—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            chat_id = context.user_data.get('chat_id')
            message_id = context.user_data.get('results_message_id')
            if chat_id and message_id:
                await context.bot.edit_message_text(
                    text=message_text,
                    chat_id=chat_id,
                    message_id=message_id,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ")
                if hasattr(update, 'effective_chat'):
                    chat_id = update.effective_chat.id
                    message = await context.bot.send_message(
                        chat_id=chat_id,
                        text=message_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                    context.user_data['results_message_id'] = message.message_id
                    context.user_data['chat_id'] = chat_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        # Fallback: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        try:
            chat_id = None
            if hasattr(update, 'callback_query') and hasattr(update.callback_query, 'message'):
                chat_id = update.callback_query.message.chat_id
            elif hasattr(update, 'message'):
                chat_id = update.message.chat_id
            elif context.user_data.get('chat_id'):
                chat_id = context.user_data.get('chat_id')

            if chat_id:
                message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
                context.user_data['results_message_id'] = message.message_id
                context.user_data['chat_id'] = chat_id
        except Exception as e2:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
async def handle_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        if query.data == "prev_page":
            context.user_data['buttons_page'] = max(0, context.user_data.get('buttons_page', 0) - 1)
            await show_channels_buttons(update, context)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å update, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ query

        elif query.data == "next_page":
            results = context.user_data.get('search_results', [])
            channels_per_page = 6
            max_page = (len(results) - 1) // channels_per_page if results else 0
            context.user_data['buttons_page'] = min(max_page, context.user_data.get('buttons_page', 0) + 1)
            await show_channels_buttons(update, context)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å update, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ query

        elif query.data == "new_search":
            context.user_data.clear()
            welcome_msg = (
                "üîç *–ù–æ–≤—ã–π –ø–æ–∏—Å–∫*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:"
            )
            await query.edit_message_text(welcome_msg, parse_mode='HTML')

        elif query.data == "detailed_view":
            await show_detailed_results(update, context)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å update, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ query

        elif query.data == "back_to_list":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if context.user_data.get('search_results'):
                logger.info("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–æ–≤")
                await show_channels_buttons(update, context)  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å update, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ query
            else:
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
                    parse_mode='HTML'
                )

        elif query.data == "ignore":
            pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback: {e}")
        try:
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Å /start"
            )
        except:
            pass

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
async def show_detailed_results(update, context):
    # –ü–æ–ª—É—á–∞–µ–º query –∏–∑ update
    query = update.callback_query if hasattr(update, 'callback_query') else update

    results = context.user_data.get('search_results', [])
    page = context.user_data.get('buttons_page', 0)
    channels_per_page = 6

    start_idx = page * channels_per_page
    end_idx = min(start_idx + channels_per_page, len(results))
    current_channels = results[start_idx:end_idx]

    message_text = f"üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}):*\n\n"

    for i, channel in enumerate(current_channels, 1):
        message_text += f"*{start_idx + i}. {channel['title']}*\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö
        participants = channel.get('participants_count', 0)
        if participants > 0:
            if participants >= 1000000:
                participants_str = f"{participants // 1000000}.{(participants % 1000000) // 100000}M"
            elif participants >= 1000:
                participants_str = f"{participants // 1000}.{(participants % 1000) // 100}K"
            else:
                participants_str = str(participants)
            message_text += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {participants_str}\n"
        else:
            message_text += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n"

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        desc = channel.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        if desc and desc != '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è':
            if len(desc) > 150:
                desc = desc[:150] + "..."
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML
            desc = desc.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
            message_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n"
        else:
            message_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: –ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è\n"

        message_text += f"üîó –°—Å—ã–ª–∫–∞: {channel['link']}\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    total_pages = (len(results) + channels_per_page - 1) // channels_per_page
    message_text += f"üìÑ –ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if hasattr(query, 'edit_message_text'):
            await query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ callback_query –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            await query.callback_query.edit_message_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π: {e}")
        # Fallback –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML
        try:
            clean_text = message_text.replace('*', '').replace('_', '').replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>')
            if hasattr(query, 'edit_message_text'):
                await query.edit_message_text(clean_text, reply_markup=reply_markup)
            else:
                await query.callback_query.edit_message_text(clean_text, reply_markup=reply_markup)
        except Exception as e2:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π: {e2}")
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                clean_text = message_text.replace('*', '').replace('_', '').replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>')
                chat_id = None
                if hasattr(query, 'message'):
                    chat_id = query.message.chat_id
                elif hasattr(query, 'callback_query') and hasattr(query.callback_query, 'message'):
                    chat_id = query.callback_query.message.chat_id
                elif context.user_data.get('chat_id'):
                    chat_id = context.user_data.get('chat_id')

                if chat_id:
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text=clean_text,
                        reply_markup=reply_markup
                    )
            except Exception as e3:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e3}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
async def get_verification_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    code = update.message.text.strip()
    phone_number = context.user_data.get('phone_number')

    if not phone_number:
        await update.message.reply_html("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return SEARCH_TERMS

    success = await complete_authentication(phone_number, code)

    if success:
        await update.message.reply_html("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –ü–æ–≤—Ç–æ—Ä—è—é –ø–æ–∏—Å–∫...")

        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        search_terms = context.user_data.get('search_terms', [])
        if search_terms:
            results = await search_channels(search_terms, phone_number)
            if results and results != "error":
                context.user_data['search_results'] = results
                await show_channels_buttons(update, context)
            else:
                await update.message.reply_html("üòî –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        return SEARCH_TERMS
    else:
        await update.message.reply_html(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start"
        )
        return VERIFICATION_CODE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_html("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.")
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SEARCH_TERMS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_search_terms)],
            VERIFICATION_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_verification_code)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_pagination))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
